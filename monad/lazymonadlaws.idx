LazyMonad	monad/lazymonadlaws.html#LazyMonad	lazymonadlaws: LazyMonad	
LeftIdentitySpec	monad/lazymonadlaws.html#LeftIdentitySpec	lazymonadlaws: LeftIdentitySpec	
RightIdentitySpec	monad/lazymonadlaws.html#RightIdentitySpec	lazymonadlaws: RightIdentitySpec	
AssociativitySpec	monad/lazymonadlaws.html#AssociativitySpec	lazymonadlaws: AssociativitySpec	
MonadLawsSpec	monad/lazymonadlaws.html#MonadLawsSpec	lazymonadlaws: MonadLawsSpec	
leftIdentitySpec	monad/lazymonadlaws.html#leftIdentitySpec,A,,,R	lazymonadlaws: leftIdentitySpec[A; MA; MB; R](initial: A; lift: A -&gt; MA; f: A -&gt; MB; runArg: R): LeftIdentitySpec[\n    A, MA, MB, R]	
rightIdentitySpec	monad/lazymonadlaws.html#rightIdentitySpec,T,,R	lazymonadlaws: rightIdentitySpec[T; M; R](expected: T; lift: T -&gt; M; runArg: R): RightIdentitySpec[T, M, R]	
associativitySpec	monad/lazymonadlaws.html#associativitySpec,A,,,,R	lazymonadlaws: associativitySpec[A; B; MA; MB; MC; R](initial: A; lift: A -&gt; MA; f: A -&gt; MB; g: B -&gt; MC; runArg: R): AssociativitySpec[\n    A, B, MA, MB, MC, R]	
monadLawsSpec	monad/lazymonadlaws.html#monadLawsSpec,LeftIdentitySpec[LA,LMA,LMB,LR],RightIdentitySpec[RT,RM,RR],AssociativitySpec[AA,AB,AMA,AMB,AMC,AR]	lazymonadlaws: monadLawsSpec[LA; LMA; LMB; LR; RT; RM; RR; AA; AB; AMA; AMB; AMC; AR](\n    leftIdentity: LeftIdentitySpec[LA, LMA, LMB, LR];\n    rightIdentity: RightIdentitySpec[RT, RM, RR];\n    associativity: AssociativitySpec[AA, AB, AMA, AMB, AMC, AR]): MonadLawsSpec[LA, LMA,\n    LMB, LR, RT, RM, RR, AA, AB, AMA, AMB, AMC, AR]	
checkLeftIdentity	monad/lazymonadlaws.html#checkLeftIdentity.t,LeftIdentitySpec[A,MA,MB,R]	lazymonadlaws: checkLeftIdentity[A; MA; MB; R](spec: LeftIdentitySpec[A, MA, MB, R]): bool	
checkRightIdentity	monad/lazymonadlaws.html#checkRightIdentity.t,RightIdentitySpec[T,M,R]	lazymonadlaws: checkRightIdentity[T; M; R](spec: RightIdentitySpec[T, M, R]): bool	
checkAssociativity	monad/lazymonadlaws.html#checkAssociativity.t,AssociativitySpec[A,B,MA,MB,MC,R]	lazymonadlaws: checkAssociativity[A; B; MA; MB; MC; R](spec: AssociativitySpec[A, B, MA, MB, MC, R]): bool	
checkMonadLaws	monad/lazymonadlaws.html#checkMonadLaws.t,MonadLawsSpec[LA,LMA,LMB,LR,RT,RM,RR,AA,AB,AMA,AMB,AMC,AR]	lazymonadlaws: checkMonadLaws[LA; LMA; LMB; LR; RT; RM; RR; AA; AB; AMA; AMB; AMC; AR](spec: MonadLawsSpec[\n    LA, LMA, LMB, LR, RT, RM, RR, AA, AB, AMA, AMB, AMC, AR]): bool	
