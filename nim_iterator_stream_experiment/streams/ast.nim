when not defined(js):
  import slice
  import ../stream
  import ../utils/[nimnodes]

  import std/[macros, sugar]



  export nimnodes, stream



  type
    NimNodeStep* = SliceStep[NimNodeIndex]



  func indexes* (n: NimNode): Stream[NimNodeStep, NimNodeIndex] =
    slice(n.low(), n.high()).items()


  func indexesReverse* (n: NimNode): Stream[NimNodeStep, NimNodeIndex] =
    slice(n.low(), n.high()).itemsReverse()


  func children* (n: NimNode): Stream[NimNodeStep, NimNode] =
    n.indexes().map(i => n[i])


  func childrenReverse* (n: NimNode): Stream[NimNodeStep, NimNode] =
    n.indexesReverse().map(i => n[i])


  func pairs* (
    n: NimNode
  ): Stream[NimNodeStep, tuple[index: NimNodeIndex; node: NimNode]] =
    n.indexes().map(i => (i, n[i]))



  when isMainModule:
    import ../utils/[call]

    import std/[os, unittest]



    proc main () =
      suite currentSourcePath().splitFile().name:
        test """Counting the number of children of a NimNode "n" through a stream should return "n.len()".""":
          template doTest (n: NimNode): proc () =
            (
              proc () =
                const
                  actual = n.children().count(Natural)
                  expected = n.len()

                check:
                  actual == expected
            )


          for t in [
            doTest(newEmptyNode()),
            doTest(
              quote do:
                var a = nil
                let b = a

                echo(b)
            )
          ]:
            t.call()



        test """All the items generated by "n.pairs()" should be equal to the index and child NimNode of "n" at that index.""":
          template doTest (n: NimNode): proc () =
            (
              proc () =
                const verified =
                  n.pairs().all(
                    (pair: (NimNodeIndex, NimNode)) => pair[1] == n[pair[0]]
                  )

                check:
                  verified
            )


          for t in [
            doTest(newEmptyNode()),
            doTest("abc".newStrLitNode()),
            doTest(newProc())
          ]:
            t.call()



    main()
